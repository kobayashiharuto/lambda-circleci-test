version: 2.0

jobs:
  deploy_lambda_test:
    docker:
      - image: docker:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: node setting
          command: |
            export TEST_ENV=hoge
            env
            apk add bash
            echo ${FUNC_NAME}
            echo ${TEST_ENV}
            export ECR_DIGEST=shoohe
            echo &{ECR_DIGEST}
            echo ${TEST_ENV}
            apk add bash
            bash -c "echo test_bash"
            bash -c "echo ${TEST_ENV}"
            echo "hoho1 hoho2 hoho3 hoho4" | grep hoho | cut -d ' ' -f3
            bash -c "export ECR_DIGEST=`echo 'hoho1 hoho2 hoho3 hoho4' | grep hoho | cut -d ' ' -f3`"
            echo &{ECR_DIGEST}
            apk add nodejs
            apk add npm
            npm install -g serverless
            serverless -v
      - run:
          name: aws install
          command: |
            apk --no-cache add binutils curl
            curl -sL https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub
            curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-2.31-r0.apk
            curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-bin-2.31-r0.apk
            apk add --no-cache glibc-2.31-r0.apk glibc-bin-2.31-r0.apk
            curl -sL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip -q awscliv2.zip
            aws/install
            aws --version
      - run:
          name: aws auth
          command: |
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
            aws ecr get-login-password | docker login --username AWS --password-stdin ${AWS_ACCOUNTID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - run:
          name: build image
          command: |
            ps aux
            docker build -t tensorflow-lambda-test .
            docker tag tensorflow-lambda-test ${AWS_ACCOUNTID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${FUNC_NAME}
            export ECR_DIGEST=`docker push ${AWS_ACCOUNTID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${FUNC_NAME} | grep digest | cut -d ' ' -f3`
            echo &{ECR_DIGEST}
      - run:
          name: serverless deploy
          command: |
            serverless config credentials --provider aws --key ${AWS_ACCESS_KEY_ID_STG} --secret ${AWS_SECRET_ACCESS_KEY_STG}
            serverless deploy

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - deploy_lambda_test:
          filters:
            branches:
              only: main
